'use strict';

/**
 * Exports Item constructor
 *
 * @module item-class
 */

/**
 * General Item class for constructing consumables and treasure
 *
 * @constructor
 * @param {object} specs - attributes passed by [spec object]{@link module:item-class~specs}
 * @param {object} announcer - [Announcer]{@link
 *   module:announcer-class~Announcer} instance, handles communication between
 *   objects
 */
var Item = function(specs, announcer){
  this.name = specs.name;
  this.initialPrice = parseInt(specs.initialPrice, 10);
  this.calculatedPrice = this.initialPrice;

  this.announcer = announcer;

  this.imgElement = document.createElement('img');
  this.imgElement.setAttribute('src', this.imageUrl);
  this.imgElement.setAttribute('alt', this.name);

  this.labelElement = document.createElement('span');

  this.liElement = document.createElement('li');
  this.liElement.classList.add('item');
  this.liElement.appendChild(this.imgElement);
  this.liElement.appendChild(this.labelElement);
};

/**
 * Append root element to listHolder (defined on children class via [config]{@link module:config})
 */
Item.prototype.render = function(){
  this.listHolder.appendChild(this.liElement);
};

/**
 * Visually mark item as selected
 */
Item.prototype.select = function(){
  this.liElement.classList.add('item-selected');
};

/**
 * Visually demark item as selected
 */
Item.prototype.deselect = function(){
  this.liElement.classList.remove('item-selected');
};


/**
 * Returns object used by Announcer to subscribe and/or update objects
 *
 * @returns {module:announcer-class~publishData}
 */
Item.prototype.publish = function(){
  return {
    category: this.category,
    id: this.name,
    data: this
  };
};

/**
 * @typedef specs
 * @type Object
 * @property {string} name - Name of the item, also used as Id in other modules
 * @property {string} imageUrl - Image file (don't include folder)
 * @property {number} initialPrice - Price of item at level 1-1
 */

module.exports = Item;
