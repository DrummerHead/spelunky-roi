'use strict';

/**
 * Exports Accountant constructor
 *
 * @module accountant-class
 */

var _ = require('lodash');

/**
 * The accountant handles pricing, profits vs investments and rendering this
 * data to the DOM
 *
 * @constructor
 * @param {object} announcer - [Announcer]{@link
 *   module:announcer-class~Announcer} instance, handles communication between
 *   objects
 * @param {object} config - [config]{@link module:config} object
 */
var Accountant = function(announcer, config){
  /**
   * @type {array}
   * @example <caption>Example of this.investments structure</caption>
   * [
   *   {
   *     "id": "Rope",
   *     "number": 750,
   *     "amount": 1
   *   },
   *   {
   *     "id": "Bomb",
   *     "number": 750,
   *     "amount": 3
   *   }
   * ]
   */
  this.investments = [];
  /**
   * @type {array}
   * @example <caption>Example of this.profits structure</caption>
   * [
   *   {
   *     "id": "Large Ruby",
   *     "number": 1600,
   *     "amount": 1
   *   },
   *   {
   *     "id": "Small Ruby",
   *     "number": 400,
   *     "amount": 1
   *   },
   *   {
   *     "id": "Stack of Gold Bars",
   *     "number": 1500,
   *     "amount": 2
   *   }
   * ]
   */
  this.profits = [];
  this.announcer = announcer;

  this.announcer.publish(this.publish());


  this.investmentsElement = config.investmentsElement;
  this.profitsElement = config.profitsElement;
  this.totalElement = config.totalElement;
};

/**
 * Search this[category] for specific price according to type of item
 *
 * @param {string} category
 * @param {string} id
 * @returns {object|undefined} reference to found object
 * @see https://lodash.com/docs#find
 */
Accountant.prototype.findNumber = function(category, id){
  return _.find(this[category], function(previous){
    return previous ? previous.id === id : undefined;
  }, this);
};

/**
 * Returns function used by invest and profit
 *
 * @param {string} category - Subject domain from where the returned function will search
 * @returns {function} Function that takes data as param
 */
var moneyExchange = function(category){
  return function(data){
    var previousData = this.findNumber(category, data.id);
    if(previousData){
      previousData.number = data.number;
      previousData.amount += 1;
    }
    else{
      this[category].push(
        {
          id: data.id,
          number: data.number,
          amount: 1
        }
      );
    }
    this.render();
  };
};

/**
 * Log investment
 *
 * @function
 * @param {object} data
 * @param {string} data.id consumable id
 * @param {number} data.calculatedPrice consumable price
 */
Accountant.prototype.invest = moneyExchange('investments');

/**
 * Log profit
 *
 * @function
 * @param {object} data
 * @param {string} data.id treasure id
 * @param {number} data.calculatedPrice treasure price
 */
Accountant.prototype.profit = moneyExchange('profits');

/**
 * Get all members of a category ('investments' or 'profits'), multiply them by
 * their price and sum them
 *
 * @param {string} category - 'investments' or 'profits'
 * @returns {number} Price of the multiplication and sum
 */
var sumNumbers = function(category){
  if(this[category].length){
    return this[category].map(function(item){
      return item.number * item.amount;
    }).reduce(function(prev, curr){
      return prev + curr;
    });
  }
  else {
    return 0;
  }
};

/**
 * Update price of item according to new price
 * Render new price
 *
 * @param {object} specs
 * @param {string} specs.category - 'profits' or 'investments'
 * @param {string} specs.id - type of Treasure or Consumable
 * @param {number} specs.number - Price
 */
Accountant.prototype.updatePrice = function(specs){
  var previousData = this.findNumber(specs.category, specs.id);
  if(previousData){
    previousData.number = specs.number;
  }
  this.render();
};

/**
 * Resets all amounts of items back to 0, renders and tells announcer to
 * deselectAllItems
 * @see module:announcer-class~Announcer#deselectAllItems
 */
Accountant.prototype.resetAllAmounts = function(){
  var i, j;
  for(i = 0, j = this.investments.length; i < j; i++){
    this.investments[i].amount = 0;
  }
  for(i = 0, j = this.profits.length; i < j; i++){
    this.profits[i].amount = 0;
  }
  this.announcer.deselectAllItems();
  this.render();
};

/**
 * Render investments, profits and total to DOM
 */
Accountant.prototype.render = function(){
  var investmentsDigit = sumNumbers.call(this, 'investments');
  var profitsDigit = sumNumbers.call(this, 'profits');
  this.investmentsElement.textContent = Math.round(investmentsDigit);
  this.profitsElement.textContent = Math.round(profitsDigit);
  this.totalElement.textContent = Math.round(profitsDigit - investmentsDigit);
};

/**
 * Returns object used by Announcer to subscribe and/or update objects
 *
 * @returns {module:announcer-class~publishData}
 */
Accountant.prototype.publish = function(){
  return {
    category: 'accountant',
    id: 'accountant',
    data: this
  };
};

module.exports = Accountant;
