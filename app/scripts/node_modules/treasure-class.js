'use strict';

/**
 * Exports Treasure constructor
 *
 * @module treasure-class
 */

var inherits = require('inherits');
var Item = require('item-class');

/**
 * Treasure items, money in the bank
 *
 * @constructor
 * @augments {module:item-class~Item}
 * @param {object} specs - attributes passed by [spec object]{@link module:item-class~specs}
 * @param {object} announcer - [Announcer]{@link
 *   module:announcer-class~Announcer} instance, handles communication between
 *   objects
 * @param {object} config - [config]{@link module:config} object
 * @requires module:inherits
 */
var Treasure = function(specs, announcer, config){
  this.imageUrl = config.treasurePath + specs.imageUrl;
  this.category = 'treasure';
  this.listHolder = config.treasureList;

  Item.call(this, specs, announcer);

  this.announcer.publish(this.publish());

  this.liElement.addEventListener('click', this.profit.bind(this));
};

inherits(Treasure, Item);

/**
 * Signal the announcer to add item to profits
 */
Treasure.prototype.profit = function(){
  this.announcer.profit(
    {
      id: this.name,
      number: this.calculatedPrice
    }
  );
  this.select();
};

/**
 * Update Treasure item price (this.calculatedPrice) according to current area
 * Also updates DOM this.labelElement with new price
 *
 * @param {number} area - Current area
 * @returns {number} new price according to current area
 */
Treasure.prototype.updatePrice = function(area){
  var increase = this.initialPrice / 4;
  this.calculatedPrice = this.initialPrice + ((area - 1) * increase);
  this.labelElement.textContent = Math.round(this.calculatedPrice);
  return this.calculatedPrice;
};


module.exports = Treasure;
